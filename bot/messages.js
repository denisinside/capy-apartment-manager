import { Input } from "telegraf";
import apartmentService from '../services/apartmentService.js';
import { combineApartmentImages } from '../utils/apartmentImageCombiner.js';

export function startMessage(ctx, chat_id) {
    ctx.telegram.sendPhoto(chat_id, Input.fromLocalFile("data/images/hello.png"), {
        caption: "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å –ø—Ä–æ –∫–≤–∞—Ä—Ç–∏—Ä–∏ —É —Ç–≤–æ—î–º—É –º—ñ—Å—Ç—ñ.\n –©–æ–± –ø–æ—á–∞—Ç–∏, –æ–±–µ—Ä–∏ –±—É–¥—å-—è–∫—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ.",
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ü–æ—à—É–∫ –∫–≤–∞—Ä—Ç–∏—Ä —É –ö–∏—î–≤—ñ", callback_data: "search_kyiv" }],
            [{ text: "–ü–æ—à—É–∫ –∫–≤–∞—Ä—Ç–∏—Ä —É –õ—å–≤–æ–≤—ñ", callback_data: "search_lviv" }],
            [{ text: "–ü–æ—à—É–∫ –∫–≤–∞—Ä—Ç–∏—Ä —É –•–∞—Ä–∫–æ–≤—ñ", callback_data: "search_kharkiv" }],
            [{ text: "–ü–æ—à—É–∫ –∫–≤–∞—Ä—Ç–∏—Ä —É –î–Ω—ñ–ø—Ä—ñ", callback_data: "search_dnipro" }],
            [{ text: "–ü–æ—à—É–∫ –∫–≤–∞—Ä—Ç–∏—Ä —É –û–¥–µ—Å—ñ", callback_data: "search_odesa" }],
            [{ text: "–ü–æ—à—É–∫ –∫–≤–∞—Ä—Ç–∏—Ä —É –ü–æ–ª—Ç–∞–≤—ñ", callback_data: "search_poltava" }],
            [{ text: "–ü–æ—à—É–∫ –∫–≤–∞—Ä—Ç–∏—Ä —É –ß–µ—Ä–Ω—ñ–≥–æ–≤—ñ", callback_data: "search_chernigov" }],
            [{ text: "–ü–æ—à—É–∫ –∫–≤–∞—Ä—Ç–∏—Ä —É –ñ–∏—Ç–æ–º–∏—Ä—ñ", callback_data: "search_zhytomyr" }],
          ],
        },
      });
}

export async function searchApartments(ctx, chat_id, city) {
    try {
        console.log(`Starting apartment search for city: ${city}`);
        const apartments = await apartmentService.getApartments({city: city});

        if (!apartments || apartments.length === 0) {
            await ctx.reply(`–ù–∞ –∂–∞–ª—å, —è –Ω–µ –∑–Ω–∞–π—à–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä —É –º—ñ—Å—Ç—ñ ${city}. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–µ –º—ñ—Å—Ç–æ –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É.`);
            return;
        }

        await ctx.reply(`–û—Å—å —â–æ —è –∑–Ω–∞–π—à–æ–≤ —É –º—ñ—Å—Ç—ñ ${city}:`);
        await sendApartments(ctx, chat_id, apartments);
    } catch (error) {
        console.error(`Error in searchApartments for city ${city}:`, error);
        await ctx.reply(`–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–≤–∞—Ä—Ç–∏—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.`);
    }
}

export async function sendFavouriteApartmentsUpdates(bot, chat_id, apartments) {
    try {
        for (const apartment of apartments) {
            const priceChange = apartment.update_history.findLast(history => history.event_type === 'price_changed').details;
            const message = `‚ùó –¶—ñ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∏ –∑–º—ñ–Ω–∏–ª–∞—Å—è!\nüè† ${apartment.apartment.address.street}, ${apartment.apartment.address.district}, ${apartment.apartment.address.house_number}\nüí∞ ${priceChange}`;
            
            try {
                const combinedImage = await combineApartmentImages(apartment.apartment.photo);
                await bot.telegram.sendPhoto(chat_id, Input.fromBuffer(combinedImage), {
                    caption: message,
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: "–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è", url: apartment.apartment.link }],
                        ],
                    },
                });
            } catch (error) {
                console.error(`Error sending apartment ${apartment._id}:`, error);
                // Fallback –¥–æ –æ–¥–Ω—ñ—î—ó —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó
                await bot.telegram.sendPhoto(chat_id, Input.fromURL(apartment.apartment.photo[0]), {
                    caption: message,
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: "–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è", url: apartment.apartment.link }],
                        ],
                    },
                });
            }
        }
    } catch (error) {
        console.error('Error sending apartments:', error);
        await bot.telegram.sendMessage(chat_id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–≤–∞—Ä—Ç–∏—Ä–∏.');
    }
}

export async function sendApartmentsWithoutContext(bot, chat_id, apartments) {
    try {
        for (const apartment of apartments) {
            await sendApartmentWithoutContext(bot, chat_id, apartment);
            await new Promise(resolve => setTimeout(resolve, 200));
        }
    } catch (error) {
        console.error('Error sending apartments:', error);
        await bot.telegram.sendMessage(chat_id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–≤–∞—Ä—Ç–∏—Ä–∏.');
    }
}

export async function sendApartmentWithoutContext(bot, chat_id, apartment) {
    try {
        if (!apartment.apartment.photo || apartment.apartment.photo.length === 0) {
            console.warn(`No photos for apartment ${apartment._id}`);
            return;
        }

        try {
            const combinedImage = await combineApartmentImages(apartment.apartment.photo);
            await bot.telegram.sendPhoto(chat_id, Input.fromBuffer(combinedImage), {
                caption: sendApartmentDetails(apartment),
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è", url: apartment.apartment.link }],
                    ],
                },
            });
        } catch (error) {
            console.error(`Error sending apartment ${apartment._id}:`, error);
            // Fallback –¥–æ –æ–¥–Ω—ñ—î—ó —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó
            await bot.telegram.sendPhoto(chat_id, Input.fromURL(apartment.apartment.photo[0]), {
                caption: sendApartmentDetails(apartment),
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è", url: apartment.apartment.link }],
                    ],
                },
            });
        }
    } catch (error) {
        console.error(`Error sending apartment ${apartment._id}:`, error);
    }
}

async function sendApartments(ctx, chat_id, apartments) {
    try {
        for (const apartment of apartments) {
            await sendApartment(ctx, chat_id, apartment);
        }
    } catch (error) {
        console.error('Error sending apartments:', error);
        await ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–≤–∞—Ä—Ç–∏—Ä–∏.');
    }
}

async function sendApartment(ctx, chat_id, apartment) {
    try {
        if (!apartment.apartment.photo || apartment.apartment.photo.length === 0) {
            console.warn(`No photos for apartment ${apartment._id}`);
            return;
        }

        await ctx.telegram.sendPhoto(chat_id, Input.fromURL(apartment.apartment.photo[0]), {
            caption: sendApartmentDetails(apartment),
            reply_markup: {
                inline_keyboard: [
                    [{ text: "–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è", url: apartment.apartment.link }],
                ],
            },
        });
    } catch (error) {
        console.error(`Error sending apartment ${apartment._id}:`, error);
    }
}

function sendApartmentDetails(apartment) {
    try {
        let description = apartment.apartment.description.advert_description;
        description = description.replace(/<[^>]*>?/g, '');
        description = description.replace(/&nbsp;/g, ' ');
        description = description.replace(/&quot;/g, '"');
        description = description.replace(/&apos;/g, "'");
        description = description.replace(/&amp;/g, '&');
        description = description.replace(/&lt;/g, '<');
        description = description.replace(/&gt;/g, '>');
        description = description.replace(/<br\/>/g, '\n');
        description = description.replace(/<br>/g, '\n');
        if (description.length > 1000) {
            description = description.substring(0, 1000) + '...';
        }

        const stringBuilder = [];
        stringBuilder.push(`üè† ${apartment.apartment.address.street}, ${apartment.apartment.address.district}, ${apartment.apartment.address.house_number}`);
        stringBuilder.push(`üí∞ ${apartment.apartment.price.price_number} ${apartment.apartment.price.currency}`);
        stringBuilder.push(``);
        stringBuilder.push(`${apartment.apartment.characteristics.room_count}–∫., ${apartment.apartment.characteristics.floor} / ${apartment.apartment.characteristics.max_floor} –ø–æ–≤–µ—Ä—Ö, ${apartment.apartment.characteristics.area.total} / ${apartment.apartment.characteristics.area.living} / ${apartment.apartment.characteristics.area.kitchen} –º¬≤`);
        stringBuilder.push(`${apartment.apartment.characteristics.house_type}, ${apartment.apartment.characteristics.room_planning}`);
        stringBuilder.push(`${apartment.apartment.characteristics.state}`);
        stringBuilder.push(``);
        stringBuilder.push(`${description}`);
        return stringBuilder.join("\n");
    } catch (error) {
        console.error('Error formatting apartment details:', error);
        return '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–∏';
    }
}
