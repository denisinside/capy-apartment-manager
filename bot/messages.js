import dotenv from 'dotenv';
dotenv.config();

import { Input } from "telegraf";
import { combineApartmentImages } from '../utils/apartmentImageCombiner.js';

const WEB_APP_URL = process.env.WEB_APP_URL;
const BOT_STARTAPP_URL = process.env.BOT_STARTAPP_URL;

// --- –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ---

export function startMessage(ctx, chat_id) {
    ctx.telegram.sendPhoto(chat_id, Input.fromLocalFile("data/images/hello.png"), {
        caption: "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å –ø—Ä–æ –∫–≤–∞—Ä—Ç–∏—Ä–∏ —É —Ç–≤–æ—î–º—É –º—ñ—Å—Ç—ñ.\n\n–û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîç –ü–æ—à—É–∫", web_app: { url: `${WEB_APP_URL}/search` } }],
            [{ text: "‚≠ê –û–±—Ä–∞–Ω–µ", web_app: { url: `${WEB_APP_URL}/favourites` } }],
            [{ text: "üîî –ù–æ–≤—ñ", web_app: { url: `${WEB_APP_URL}/new` } }],
            [{ text: "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫", web_app: { url: `${WEB_APP_URL}/subscription-settings` } }],
            [{ text: "üìÑ –®–∞–±–ª–æ–Ω–∏ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤", callback_data: "share_contract" }],
          ],
        },
      });
}

function formatApartmentDetails(apartment) {
    try {
        let description = apartment.apartment.description.advert_description || '';
        description = description.replace(/<[^>]*>?/g, '');
        description = description.replace(/&nbsp;/g, ' ');
        description = description.replace(/&quot;/g, '"');
        description = description.replace(/&apos;/g, "'");
        description = description.replace(/&amp;/g, '&');
        description = description.replace(/&lt;/g, '<');
        description = description.replace(/&gt;/g, '>');
        description = description.replace(/<br\/>/g, '\n');
        description = description.replace(/<br>/g, '\n');
        if (description.length > 800) {
            description = description.substring(0, 800) + '...';
        }

        const details = [
            `üìç <b>${apartment.apartment.address.street}, ${apartment.apartment.address.district}${apartment.apartment.address.house_number ? ', ' + apartment.apartment.address.house_number : ''}</b>`,
            `üí∞ <b>${apartment.apartment.price.price_number} ${apartment.apartment.price.currency}</b>`,
            ``,
            `üõèÔ∏è ${apartment.apartment.characteristics.room_count}–∫.`,
            `ü™ú ${apartment.apartment.characteristics.floor} / ${apartment.apartment.characteristics.max_floor} –ø–æ–≤–µ—Ä—Ö`,
            `üìê ${apartment.apartment.characteristics.area.total} –º¬≤ (–∑–∞–≥.) / ${apartment.apartment.characteristics.area.living} –º¬≤ (–∂–∏—Ç–ª.) / ${apartment.apartment.characteristics.area.kitchen} –º¬≤ (–∫—É—Ö–Ω—è)`,
            `üèóÔ∏è ${apartment.apartment.characteristics.house_type}`,
            `üõ†Ô∏è ${apartment.apartment.characteristics.state}`,
            ``,
            `${description}`
        ];
        return details.join("\n").trim();
    } catch (error) {
        console.error(`Error formatting apartment details for ${apartment._id}:`, error);
        return '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–∏';
    }
}


// --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–≤–∞—Ä—Ç–∏—Ä (–∑–∞–≥–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó) ---

async function sendSingleApartment(bot, chat_id, apartment, replyMarkup) {
    const caption = formatApartmentDetails(apartment);
    const photos = apartment.apartment.photo;

    if (!photos || photos.length === 0) {
        console.warn(`No photos for apartment ${apartment._id}, sending text message.`);
        await bot.telegram.sendMessage(chat_id, caption, {
            parse_mode: 'HTML',
            reply_markup: replyMarkup,
            disable_web_page_preview: true
        });
        return;
    }

    try {
        const combinedImage = await combineApartmentImages(photos);
        await bot.telegram.sendPhoto(chat_id, Input.fromBuffer(combinedImage), {
            caption: caption,
            parse_mode: 'HTML',
            reply_markup: replyMarkup,
        });
    } catch (combineError) {
        console.error(`Error combining images for apartment ${apartment._id}, falling back to single photo:`, combineError);
        try {
            await bot.telegram.sendPhoto(chat_id, Input.fromURL(photos[0]), {
                caption: caption,
                parse_mode: 'HTML',
                reply_markup: replyMarkup,
            });
        } catch (fallbackError) {
            console.error(`Error sending fallback single photo for apartment ${apartment._id}:`, fallbackError);
            await bot.telegram.sendMessage(chat_id, caption, {
                 parse_mode: 'HTML',
                 reply_markup: replyMarkup,
                 disable_web_page_preview: true
            });
        }
    }
}

// --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä (–¥–ª—è –ø—ñ–¥–ø–∏—Å–æ–∫) ---

export async function sendApartmentsWithoutContext(bot, chat_id, apartments) {
    try {
        await bot.telegram.sendMessage(chat_id, `üîî –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ñ –∫–≤–∞—Ä—Ç–∏—Ä–∏ –∑–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏:`);
        for (const apartment of apartments) {
            const replyMarkup = {
                inline_keyboard: [
                    [
                        { text: "‚û°Ô∏è –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –≤ –¥–æ–¥–∞—Ç–∫—É", web_app: { url: `${WEB_APP_URL}/apartment/${apartment._id}` } },
                        { text: "üÜï –í—Å—ñ –Ω–æ–≤—ñ", web_app: { url: `${WEB_APP_URL}/new` } }
                    ],
                     [{ text: "üåê –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñ", url: apartment.apartment.link }]
                ],
            };
            await sendSingleApartment(bot, chat_id, apartment, replyMarkup);
            await new Promise(resolve => setTimeout(resolve, 300));
        }
    } catch (error) {
        console.error('Error sending new apartments:', error);
        await bot.telegram.sendMessage(chat_id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–æ–≤—ñ –∫–≤–∞—Ä—Ç–∏—Ä–∏.');
    }
}

// --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å –æ–±—Ä–∞–Ω–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä (–∑–º—ñ–Ω–∞ —Ü—ñ–Ω–∏) ---

export async function sendFavouriteApartmentsUpdates(bot, chat_id, apartments) {
    try {
        for (const apartment of apartments) {
            const priceChangeHistory = apartment.update_history?.findLast(history => history.event_type === 'price_changed');
            if (!priceChangeHistory) continue;

            const priceDetails = priceChangeHistory.details || '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–º—ñ–Ω—É —Ü—ñ–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω—è.';
            const message = `‚ùó <b>–ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –∫–≤–∞—Ä—Ç–∏—Ä–∏</b>\n${priceDetails}\n\n${formatApartmentDetails(apartment)}`;

             const replyMarkup = {
                inline_keyboard: [
                    [{ text: "‚û°Ô∏è –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –≤ –¥–æ–¥–∞—Ç–∫—É", web_app: { url: `${WEB_APP_URL}/apartment/${apartment._id}` } }],
                    [{ text: "üåê –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñ", url: apartment.apartment.link }]
                ],
            };

            await sendSingleApartment(bot, chat_id, apartment, replyMarkup);
            await new Promise(resolve => setTimeout(resolve, 300));
        }
    } catch (error) {
        console.error('Error sending favorite apartments updates:', error);
        await bot.telegram.sendMessage(chat_id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω—å –æ–±—Ä–∞–Ω–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä.');
    }
}

// --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ ---

export async function sendContractTemplates(bot, chat_id) {
    try {
        await bot.telegram.sendMessage(chat_id, 'üìÑ –û—Å—å —à–∞–±–ª–æ–Ω–∏ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ –æ—Ä–µ–Ω–¥–∏:');

        const pdfPath = 'data/contracts/zrazok-dogovoru-orendy-zhytla.pdf';
        const docxPath = 'data/contracts/zrazok-dogovoru-orendy-zhytla.docx';

        try {
             await bot.telegram.sendDocument(chat_id, Input.fromLocalFile(pdfPath));
        } catch (pdfError) {
             console.error('Error sending PDF contract:', pdfError);
             await bot.telegram.sendMessage(chat_id, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ PDF —à–∞–±–ª–æ–Ω—É.');
        }

        try {
            await bot.telegram.sendDocument(chat_id, Input.fromLocalFile(docxPath), {
                 reply_markup: {
                     inline_keyboard: [
                         [{ text: "üìù –í—ñ–¥–∫—Ä–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–æ–≥–æ–≤–æ—Ä—ñ–≤", web_app: { url: `${WEB_APP_URL}/contracts` } }]
                     ]
                 }
             });
        } catch (docxError) {
            console.error('Error sending DOCX contract:', docxError);
            await bot.telegram.sendMessage(chat_id, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ DOCX —à–∞–±–ª–æ–Ω—É.');
             await bot.telegram.sendMessage(chat_id, '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ —É –¥–æ–¥–∞—Ç–∫—É.', {
                 reply_markup: {
                     inline_keyboard: [
                         [{ text: "üìù –í—ñ–¥–∫—Ä–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–æ–≥–æ–≤–æ—Ä—ñ–≤", web_app: { url: `${WEB_APP_URL}/contracts` } }]
                     ]
                 }
             });
        }

    } catch (error) {
        console.error('Error sending contract templates:', error);
        await bot.telegram.sendMessage(chat_id, '–í–∏–Ω–∏–∫–ª–∞ –∑–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —à–∞–±–ª–æ–Ω—ñ–≤ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤.');
    }
}